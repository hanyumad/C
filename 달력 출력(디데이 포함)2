#include <stdio.h>
#include <time.h>

// 열거형 및 문자열 배열
enum month { Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec };
enum day { Sun, Mon, Tue, Wed, Thu, Fri, Sat };

const char *monthName[] = { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" };
const char *dayName[] = { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

// 입력 함수
int InputYear() {
    int year;
    printf("Input Year (1900 ~ 2100)\nYear: ");
    scanf("%d", &year);
    if (year < 1900 || year > 2100) {
        printf("\nInvalid Year\n");
        return 1;
    }
    return year;
}

int InputMonth() {
    int month;
    printf("\nInput Month (1 ~ 12)\nMonth: ");
    scanf("%d", &month);
    if (month < 1 || month > 12) {
        printf("\nInvalid Month\n");
        return 1;
    }
    return month;
}

// 달력 출력 함수
void PrintCalendar(int year, int month) {
    struct tm timeinfo = {0};
    timeinfo.tm_year = year - 1900;
    timeinfo.tm_mon = month - 1;
    timeinfo.tm_mday = 1;
    mktime(&timeinfo);

    int Week = timeinfo.tm_wday;
    int lastDay;

    switch (month) {
        case Feb+1:
            if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {
                lastDay = 29;
            } else {
                lastDay = 28;
            }
            break;
        case Apr+1: 
        case Jun+1: 
        case Sep+1: 
        case Nov+1:
            lastDay = 30;
            break;
        default:
            lastDay = 31;
    }

    printf("\n%d / %s\n", year, monthName[month-1]);
    printf("===========================\n");
    for (int i = Sun; i <= Sat; i++) {
        printf("%s ", dayName[i]);
    }
    printf("\n===========================\n");

    for (int i = 0; i < Week; i++) {
        printf("\t");
    }

    for (int date = 1; date <= lastDay; date++) {
        printf("%3d ", date);
        Week++;
        if (Week == 7) {
            printf("\n");
            Week = 0;
        }
    }
    printf("\n");
}

// 디데이 계산 함수
void DDay() {
    char answer;
    
    while (1) {
        printf("\nCheck D-Day? (Y/N): ");
        scanf("%c", &answer);

        if (answer == 'Y' || answer == 'y') {
            int y, m, d;
            
            while (1) {
                printf("Input D-Day (YYYY MM DD): ");
                if (scanf("%d %d %d", &y, &m, &d) != 3) {
                    printf("Input value number\n");
                    while (getchar() != '\n');  // 버퍼 비우기
                    continue;
                }
                if (y < 1900 || y > 2100 || m < 1 || m > 12 || d < 1 || d > 31) {
                    printf("Input value date\n");
                    continue;
                }
                break;
            }

            struct tm today = {0}, target = {0};
            time_t t_today, t_target;
            time(&t_today);
            today = *localtime(&t_today);

            target.tm_year = y - 1900;
            target.tm_mon = m - 1;
            target.tm_mday = d;
            t_target = mktime(&target);

            double diff = difftime(t_target, t_today) / (60 * 60 * 24);

            if (diff > 0)
                printf("D-%d\n", (int)diff);
            else if (diff == 0)
                printf("D-Day\n");
            else
                printf("D+%d\n", (int)(-diff));

            break;

        } else if (answer == 'N' || answer == 'n') {
            printf("Program stop\n");
            break;
        } else {
            printf("Input only Y or N\n");
            while (getchar() != '\n');  // 버퍼 비우기
        }
    }
}

// 메인 함수
int main() {
    int year = InputYear();
    if (year == 1) {
        return 0;
    }
    int month = InputMonth();
    if (month == 1) {
        return 0;
    }
    PrintCalendar(year, month);
    DDay();

    return 0;
}
