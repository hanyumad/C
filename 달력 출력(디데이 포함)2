#include <stdio.h>
#include <time.h>

// 열거형 및 문자열 배열
enum month { Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec };
enum day { Sun, Mon, Tue, Wed, Thu, Fri, Sat };

const char *monthName[] = { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" };
const char *dayName[] = { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };    // 월과 요일 이름을 문자열로 저장, 상수화

int InputYear() {    // 연도 입력 받기
    int year;
    printf("Input Year (1900 ~ 2100)\nYear: ");
    scanf("%d", &year);
    if (year < 1900 || year > 2100) {    // 1900부터 2100까지만 입력 받음
        printf("\nInvalid Year\n");
        return 1;    // 범위를 벗어나면 1 반환
    }
    return year;
}

int InputMonth() {    // 월 입력 받기
    int month;
    printf("\nInput Month (1 ~ 12)\nMonth: ");
    scanf("%d", &month);
    if (month < 1 || month > 12) {    // 1에서 12까지만 입력 받음
        printf("\nInvalid Month\n");
        return 1;    // 범위를 벗어나면 1 반환
    }
    return month;
}

// 달력 출력 함수
void PrintCalendar(int year, int month) {
    struct tm timeinfo = {0};
    timeinfo.tm_year = year - 1900;
    timeinfo.tm_mon = month - 1;
    timeinfo.tm_mday = 1;
    mktime(&timeinfo);

    int Week = timeinfo.tm_wday;    // 해당 월 1일의 요일 저장 (0 ~ 6)
    int lastDay;    // 해당 월의 마지막 날짜 저장

    switch (month) {
        case Feb+1:
            if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {
                lastDay = 29;    // 2월은 윤년 계산
            } else {
                lastDay = 28;
            }
            break;
        case Apr+1: 
        case Jun+1: 
        case Sep+1: 
        case Nov+1:
            lastDay = 30;    // 4, 6, 9, 11월은 30일
            break;
        default:
            lastDay = 31;    // 나머지는 31일
    }

    printf("\n%d / %s\n", year, monthName[month-1]);
    printf("===========================\n");
    for (int i = Sun; i <= Sat; i++) {    // 요일 헤더 출력, 0부터 6까지
        printf("%s ", dayName[i]);
    }
    printf("\n===========================\n");

    for (int i = 0; i < Week; i++) {
        printf("    ");    // 1일이 시작하는 요일까지 공백 출력
    }

    for (int date = 1; date <= lastDay; date++) {    // 1일부터 lastday까지 출력
        printf("%3d ", date);
        Week++;
        if (Week == 7) {
            printf("\n");    // 일주일 지나면 개행
            Week = 0;
        }
    }
    printf("\n");
}

// 디데이 계산 함수
void DDay() {
    char answer;
    
    while (1) {
        printf("\nCheck D-Day? (Y/N): ");   
        scanf(" %c", &answer);

        if (answer == 'Y' || answer == 'y') {    // y 선택한다면
            int y, m, d;
            
            while (1) {
                printf("Input D-Day (YYYY MM DD): ");
                if (scanf("%d %d %d", &y, &m, &d) != 3) {    // 날짜 입력 3개 받음
                    printf("Input value number\n");    // 3개가 아니라면 오류 문자 출력
                    while (getchar() != '\n');  // 버퍼 비우기
                    continue;
                }
                if (y < 1900 || y > 2100 || m < 1 || m > 12 || d < 1 || d > 31) {    // 연도는 1900부터 2100 / 월은 1부터 12 / 일은 1부터 31까지
                    printf("Input value date\n");    // 넘는다면 오류 문자 출력
                    continue;
                }
                    break;
            }

            struct tm today = {0}, target = {0};
            time_t t_today, t_target;
            time(&t_today);
            today = *localtime(&t_today);    // 현재 시간 가져오기

            target.tm_year = y - 1900;    // tm이 1900에서 시작이기 때문에 1900년도에서 지난 값을 구하기 위해선 1900 빼야함
            target.tm_mon = m - 1;
            target.tm_mday = d + 1;
            t_target = mktime(&target);    // 목표 날짜 설정

            double diff = difftime(t_target, t_today) / (60 * 60 * 24);    // 시간 차이를 초 단위로 구해 일 단위로 변환

            if (diff > 0) {
                printf("D-%d\n", (int)diff);
            } else if ((int)diff == 0) {
                printf("D-Day\n");
            } else {
                printf("D+%d\n", (int)(-diff));    // 남은 날, 오늘, 지난 날 조건에 맞춰 출력
            }
            break;
        } else if (answer == 'N' || answer == 'n') {    // n 선택한다면 프로그램 종료
            printf("Program stop\n");
            break;
        } else {
            printf("Input only Y or N\n");    // y, n 이외 값 입력 시 반복
                while (getchar() != '\n');  // 버퍼 비우기
        }
    }
}

int programstart(int *year, int *month) {
    *year = InputYear();
    
    if (*year == 1) {    // 1 반환 시 프로그램 종료
        return 0;
    }
    *month = InputMonth();
    
    if (*month == 1) {    // 1 반환 시 프로그램 종료
        return 0;
    }
    return 1;
}

int main() {
    int year, month;
    
    if (!programstart(&year, &month)) {
        return 0;
    }
    PrintCalendar(year, month);
    DDay();

    return 0;
}
